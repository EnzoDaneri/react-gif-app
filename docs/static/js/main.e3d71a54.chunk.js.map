{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","console","log","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAIaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAElBC,mBAAS,IAFS,mBAE7CC,EAF6C,KAElCC,EAFkC,KAqBhD,OACI,oCACE,0BAAMC,SAdM,SAAEC,GACvBA,EAAEC,iBAEEJ,EAAYK,OAAOC,OAAS,IAC7BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAe,OAUT,2BACMO,KAAK,OACLC,MAAQT,EACRU,SAvBU,SAAEP,GACvBQ,QAAQC,IAAIT,EAAEU,OAAOJ,OACrBR,EAAcE,EAAEU,OAAOJ,a,uBCRVK,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEdC,EAFc,iDAEkCC,UAAUH,GAF5C,+DAIDI,MAAOF,GAJN,cAIdG,EAJc,gBAKGA,EAAKC,OALR,uBAKZC,EALY,EAKZA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAEzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZvB,kBAgBbM,GAhBa,4CAAH,sDCAZO,EAAc,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAIlC,OACI,yBAAKc,UAAU,0CACZ,yBAAKC,IAAMf,EAAMgB,IAAON,IACxB,+BAAMA,EAAN,OCLEO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAb,SAAEA,GAAe,IAAD,EAEjBhB,mBAAS,CAChCuB,KAAM,GACNa,SAAS,IAJ+B,mBAEpCC,EAFoC,KAE7BC,EAF6B,KAyB3C,OAjBGC,qBAAW,WAEPxB,EAASC,GACRwB,MAAM,SAAAC,GAGHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAMlB,CAACpB,IAGAqB,EDvB2BK,CAAc1B,GAAlCa,EAF0B,EAE/BN,KAAaa,EAFkB,EAElBA,QAQnB,OACE,oCACE,wBAAIJ,UAAU,qCAAd,IAAoDhB,EAApD,KAECoB,GAAW,uBAAGJ,UAAU,oCAAb,WAEX,yBAAKA,UAAU,aAGLH,EAAOJ,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACOiB,IAAMjB,EAAIC,IACND,UEkBnBkB,EAvCM,WAAM,MAIW5C,mBAAS,CAAC,aAJrB,mBAIlB6C,EAJkB,KAIN9C,EAJM,KAWvB,OACG,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAIH,4BAEK8C,EAAWpB,KAAK,SAAAT,GAAQ,OACV,kBAAC,EAAD,CACA2B,IAAK3B,EACLA,SAAYA,UCvBvC8B,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.e3d71a54.chunk.js","sourcesContent":["\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ( { setCategories } ) => {\n\nconst [inputValue,setInputValue]= useState('');\n\nconst handleInputChange = ( e ) => {\n     console.log(e.target.value);\n     setInputValue(e.target.value);\n}\n\nconst handleSubmit =  ( e )  => {\n e.preventDefault();\n\n if( inputValue .trim().length > 2) {\n    setCategories( cats => [inputValue, ...cats ]);\n    setInputValue( '' );\n }\n \n\n}\n\n\n    return (\n        <>\n          <form onSubmit={ handleSubmit } >\n          <input \n                type=\"text\" \n                value={ inputValue }\n                onChange={ handleInputChange }\n          />\n          </form>\n        </>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","\n\n     export const getGifs = async ( category ) => {\n        //encodeUri reemplaza los espacios por %20 entre otras cosas. \n        const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category )}&limit=10&api_key=Nmipx3kri7m8A5UIS9gDcH47QMw0Llyh` ;\n    \n        const resp = await fetch( url );\n        const { data } = await resp.json();\n         \n        const gifs = data.map( img => {\n    \n             return {\n                 id: img.id,\n                 title: img.title,\n                 url: img.images?.downsized_medium.url\n             }\n        });\n    \n        return gifs;\n      \n    \n      }\n    ","import React from 'react'\n\nexport const GifGridItem = ( { title, url } ) => {\n\n    \n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\" >\n           <img src={ url } alt= { title }/>\n           <p> { title } </p>\n\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( {category} ) => {\n\n   const {data:images, loading } = useFetchGifs( category );\n//En la desestructuración puedo renombrar ej: data:images\n   \n   \n\n\n\n\n    return (\n      <>\n        <h3 className=\"animate__animated animate__fadeIn\"> {category} </h3>\n\n        {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n\n         <div className=\"card-grid\">\n          \n               {\n                   images.map( img => (\n                       <GifGridItem \n                              key={ img.id } \n                              {...img}\n                      />\n                   ))\n               }\n            \n        </div> \n      \n      </>\n    )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from '../helpers/getGifs';\n\n\nexport const useFetchGifs = ( category ) => {\n\n const [state, setstate] = useState({\n    data: [],\n    loading: true\n });\n\n\n    useEffect( () => {\n\n        getGifs( category )\n        .then( imgs => {\n\n    \n            setstate({ \n                data: imgs,\n                loading: false\n            });\n\n          \n        })\n\n    }, [category ])\n\n\n return state; // es la data[] y loading: true\n\n}","import React, {  useState } from 'react';\n\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n//   const categories = ['One Puch', 'Samurai X', 'Dragon Ball'];\n\n  const [categories, setCategories] = useState(['One Puch']);\n\n\n//   const handleAdd = () => {\n//       setCategories( [ 'HunteXHunter', ...categories] );\n//   }\n\n    return (\n       <>\n           <h2>GifExpertApp</h2>\n           <AddCategory setCategories={ setCategories } />\n           <hr/>\n      \n         \n{/* React me pide que tenga un key para identificar cada elemento. La buena práctica es ponerlo así como está dentro del <li></li> */}\n        <ul> \n           { \n             categories.map( category =>  (\n                           <GifGrid \n                           key={category}\n                           category= { category }\n                          \n                 />\n             ))\n           \n           }\n\n        </ul>\n\n\n        </>\n      \n    )\n}\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n\n    <GifExpertApp />,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}